// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: coupons.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const couponExists = `-- name: CouponExists :one
SELECT EXISTS (SELECT 1 FROM "stripe"."coupons" WHERE id = $1)
`

func (q *Queries) CouponExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, couponExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteAllCoupons = `-- name: DeleteAllCoupons :exec
DELETE FROM "stripe"."coupons"
`

func (q *Queries) DeleteAllCoupons(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCoupons)
	return err
}

const deleteCoupon = `-- name: DeleteCoupon :exec
DELETE FROM "stripe"."coupons" WHERE id = $1
`

func (q *Queries) DeleteCoupon(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCoupon, id)
	return err
}

const upsertCoupons = `-- name: UpsertCoupons :exec
INSERT INTO "stripe"."coupons" (
    id, object, amount_off, created, currency, duration, duration_in_months, livemode, max_redemptions,
    metadata, name, percent_off, redeem_by, times_redeemed, valid, applies_to, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, NOW()
) ON CONFLICT (id) DO UPDATE SET 
    object = EXCLUDED.object,
    amount_off = EXCLUDED.amount_off,
    created = EXCLUDED.created,
    currency = EXCLUDED.currency,
    duration = EXCLUDED.duration,
    duration_in_months = EXCLUDED.duration_in_months,
    livemode = EXCLUDED.livemode,
    max_redemptions = EXCLUDED.max_redemptions,
    metadata = EXCLUDED.metadata,
    name = EXCLUDED.name,
    percent_off = EXCLUDED.percent_off,
    redeem_by = EXCLUDED.redeem_by,
    times_redeemed = EXCLUDED.times_redeemed,
    valid = EXCLUDED.valid,
    applies_to = EXCLUDED.applies_to,
    updated_at = NOW()
`

type UpsertCouponsParams struct {
	ID               string
	Object           string
	AmountOff        sql.NullInt64
	Created          int64
	Currency         sql.NullString
	Duration         string
	DurationInMonths sql.NullInt64
	Livemode         bool
	MaxRedemptions   sql.NullInt64
	Metadata         pqtype.NullRawMessage
	Name             string
	PercentOff       sql.NullFloat64
	RedeemBy         sql.NullInt64
	TimesRedeemed    sql.NullInt64
	Valid            bool
	AppliesTo        pqtype.NullRawMessage
}

func (q *Queries) UpsertCoupons(ctx context.Context, arg UpsertCouponsParams) error {
	_, err := q.db.ExecContext(ctx, upsertCoupons,
		arg.ID,
		arg.Object,
		arg.AmountOff,
		arg.Created,
		arg.Currency,
		arg.Duration,
		arg.DurationInMonths,
		arg.Livemode,
		arg.MaxRedemptions,
		arg.Metadata,
		arg.Name,
		arg.PercentOff,
		arg.RedeemBy,
		arg.TimesRedeemed,
		arg.Valid,
		arg.AppliesTo,
	)
	return err
}
