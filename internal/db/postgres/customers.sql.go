// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: customers.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
	"github.com/tabbed/pqtype"
)

const customerExists = `-- name: CustomerExists :one
SELECT EXISTS (SELECT 1 FROM "stripe"."customers" WHERE id = $1)
`

func (q *Queries) CustomerExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, customerExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteAllCustomers = `-- name: DeleteAllCustomers :exec
DELETE FROM "stripe"."customers"
`

func (q *Queries) DeleteAllCustomers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCustomers)
	return err
}

const upsertCustomer = `-- name: UpsertCustomer :exec
INSERT INTO "stripe"."customers" (
    id, object, address, description, email, metadata, name, phone, shipping, balance, created, 
    currency, delinquent, discount, invoice_prefix, invoice_settings, livemode, 
    next_invoice_sequence, preferred_locales, tax_exempt, deleted, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, 
    $20, $21, NOW()
) ON CONFLICT (id) DO UPDATE SET 
    object = EXCLUDED.object,
    address = EXCLUDED.address,
    description = EXCLUDED.description,
    email = EXCLUDED.email,
    metadata = EXCLUDED.metadata,
    name = EXCLUDED.name,
    phone = EXCLUDED.phone,
    shipping = EXCLUDED.shipping,
    balance = EXCLUDED.balance,
    created = EXCLUDED.created,
    currency = EXCLUDED.currency,
    delinquent = EXCLUDED.delinquent,
    discount = EXCLUDED.discount,
    invoice_prefix = EXCLUDED.invoice_prefix,
    invoice_settings = EXCLUDED.invoice_settings,
    livemode = EXCLUDED.livemode,
    next_invoice_sequence = EXCLUDED.next_invoice_sequence,
    preferred_locales = EXCLUDED.preferred_locales,
    tax_exempt = EXCLUDED.tax_exempt,
    deleted = EXCLUDED.deleted,
    updated_at = NOW()
`

type UpsertCustomerParams struct {
	ID                  string
	Object              string
	Address             pqtype.NullRawMessage
	Description         sql.NullString
	Email               sql.NullString
	Metadata            pqtype.NullRawMessage
	Name                sql.NullString
	Phone               sql.NullString
	Shipping            pqtype.NullRawMessage
	Balance             sql.NullInt64
	Created             int64
	Currency            sql.NullString
	Delinquent          bool
	Discount            pqtype.NullRawMessage
	InvoicePrefix       string
	InvoiceSettings     pqtype.NullRawMessage
	Livemode            bool
	NextInvoiceSequence int64
	PreferredLocales    []string
	TaxExempt           string
	Deleted             bool
}

func (q *Queries) UpsertCustomer(ctx context.Context, arg UpsertCustomerParams) error {
	_, err := q.db.ExecContext(ctx, upsertCustomer,
		arg.ID,
		arg.Object,
		arg.Address,
		arg.Description,
		arg.Email,
		arg.Metadata,
		arg.Name,
		arg.Phone,
		arg.Shipping,
		arg.Balance,
		arg.Created,
		arg.Currency,
		arg.Delinquent,
		arg.Discount,
		arg.InvoicePrefix,
		arg.InvoiceSettings,
		arg.Livemode,
		arg.NextInvoiceSequence,
		pq.Array(arg.PreferredLocales),
		arg.TaxExempt,
		arg.Deleted,
	)
	return err
}
