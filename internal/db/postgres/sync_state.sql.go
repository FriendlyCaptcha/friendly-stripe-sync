// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: sync_state.sql

package postgres

import (
	"context"
)

const deleteCurrentSyncState = `-- name: DeleteCurrentSyncState :exec
DELETE FROM "stripe"."sync_state" WHERE id = 'current_state'
`

func (q *Queries) DeleteCurrentSyncState(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCurrentSyncState)
	return err
}

const getCurrentSyncState = `-- name: GetCurrentSyncState :one
SELECT id, last_event FROM "stripe"."sync_state" WHERE id = 'current_state'
`

func (q *Queries) GetCurrentSyncState(ctx context.Context) (StripeSyncState, error) {
	row := q.db.QueryRowContext(ctx, getCurrentSyncState)
	var i StripeSyncState
	err := row.Scan(&i.ID, &i.LastEvent)
	return i, err
}

const setSyncState = `-- name: SetSyncState :exec
INSERT INTO "stripe"."sync_state" (id, last_event) VALUES ('current_state', $1) ON CONFLICT (id) DO UPDATE SET last_event = EXCLUDED.last_event
`

func (q *Queries) SetSyncState(ctx context.Context, lastEvent int64) error {
	_, err := q.db.ExecContext(ctx, setSyncState, lastEvent)
	return err
}
